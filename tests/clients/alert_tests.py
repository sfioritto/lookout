from clients import alerts
from lamson.mail import MailRequest
from conf import home
from webapp.alerts.models import Alert, AlertBlurb
from webapp.account.models import Account
from webapp.folders.models import Folder
from django.contrib.auth.models import User
import os
import re

sender = "test@localhost"
receiver = "google@localhost"

msg = MailRequest('fakepeer', sender, receiver, open(home("tests/data/emails/alert-confirmation.msg")).read())


def setup():
    user = User.objects.all()[0]
    account = Account(email="test@test.com",
                   user=user)
    account.save()
    folder = Folder(name="Beth",
                    user=account)
    folder.save()
    alert = Alert(user=account,
                  folder=folder)
    alert.save()

def teardown():
    Alert.objects.all().delete()
    AlertBlurb.objects.all().delete()
    Account.objects.all().delete()
    Folder.objects.all().delete()
    

def test_get_confirmation_url():

    """
    Scrape the confirmation url from the email.
    """
    
    body = msg.base.body
    url = alerts.get_conf_url(body)
    assert url == "/alerts/verify?gl=us&hl=en&s=AB2Xq4jYrbhsp8BlA12NFLDxGgFlmQQ2kF2WF5o"


def test_confirmed():
    """
    Test html generated by a successful confirmation
    """
    assert alerts.confirmed(open(home('tests/data/html/good-verify.html')).read())


def test_not_confirmed():
    """
    Test html generated by a failed confirmation.
    """
    assert alerts.confirmed(open(home('tests/data/html/bad-verify.html')).read()) == False
    

def test_get_html_stubs():
    """
    Given some html, return a list
    of html stubs that represent
    alerts.
    """
    alertsmsg = MailRequest('fakepeer', sender, "alerts-1@lookoutthere.com", open(home("tests/data/emails/beth-alerts.msg")).read())
    stubs = alerts.get_html_stubs(alertsmsg.body())
    assert len(stubs) == 15


def test_get_raw_alert():
    """
    Given a chunk of html, turn it into
    a python dictionary we can use to 
    populate a database record.
    """
    alertsmsg = MailRequest('fakepeer', sender, "alerts-1@lookoutthere.com", open(home("tests/data/emails/beth-alerts.msg")).read())
    stub = alerts.get_html_stubs(alertsmsg.body())[1]
    alert = alerts.get_raw_alert(stub)
    assert alert.has_key('blurb')
    assert alert['title'].startswith("Q&amp;A with outgoing Irving council member")
    assert alert['source'] == "Dallas Morning News"
    assert alert['byline'] == "BRANDON FORMBY"
    alert['url'] == "http://www.dallasnews.com/sharedcontent/dws/news/city/coppell_vr/stories/DN-vanduyneqa_06met.ART.Central.Edition1.f47fa.html"

    stub = alerts.get_html_stubs(alertsmsg.body())[0]
    alert = alerts.get_raw_alert(stub)
    assert alert['byline'] == ""
    assert alert['url'] == "http://bleacherreport.com/articles/388807-beth-phoenix-is-injured-but-thank-god-its-not-serious"    

def test_create_alert_blurb():
     alertsmsg = MailRequest('fakepeer', sender, "alerts-1@lookoutthere.com", open(home("tests/data/emails/beth-alerts.msg")).read())
     alert = Alert.objects.all()[0]
     blurb = alerts.create_alert(alertsmsg, alert)
     assert True

    
