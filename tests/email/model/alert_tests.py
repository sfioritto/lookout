from tests.email import create_alert
from app.model import alerts
from lamson.mail import MailRequest
from conf import home
from webapp.alerts.models import Alert
from webapp.blurb.models import Blurb
from webapp.account.models import Account
from webapp.clients.models import Client
from django.contrib.auth.models import User
from nose.tools import *
import os
import re

sender = "test@localhost"
receiver = "google@localhost"

msg = MailRequest('fakepeer', sender, receiver, open(home("tests/data/emails/alert-confirmation.msg")).read())

addr = "alerts-11@lookoutthere.com"
compmsg = MailRequest('fakepeer', "me@localhost", addr, open(home("tests/data/emails/computer-alerts.msg")).read())



def setup_func():
    """
    Runs before every test.
    """
    pass

def teardown_func():
    """
    Runs after every test.
    """
    Alert.objects.all().delete()


def setup():
    user = User.objects.all()[0]
    account = Account(email="test@test.com",
                   user=user)
    account.save()
    client = Client(name="Beth",
                    user=account)
    client.save()
    alert = Alert(user=account,
                  client=client,
                  term="l",
                  type="l",
                  frequency="50",
                  length=50)
    alert.save()

def teardown():
    Alert.objects.all().delete()
    Blurb.objects.all().delete()
    Account.objects.all().delete()
    Client.objects.all().delete()
    

def test_get_confirmation_url():

    """
    Scrape the confirmation url from the email.
    """
    
    body = msg.base.body
    url = alerts.get_conf_url(body)
    assert url == "/alerts/verify?gl=us&hl=en&s=AB2Xq4jYrbhsp8BlA12NFLDxGgFlmQQ2kF2WF5o"


def test_confirmed():
    """
    Test html generated by a successful confirmation
    """
    assert alerts.confirmed(open(home('tests/data/html/good-verify.html')).read())


def test_not_confirmed():
    """
    Test html generated by a failed confirmation.
    """
    assert alerts.confirmed(open(home('tests/data/html/bad-verify.html')).read()) == False
    

def test_get_html_stubs():
    """
    Given some html, return a list
    of html stubs that represent
    alerts.
    """
    alertsmsg = MailRequest('fakepeer', sender, "alerts-1@lookoutthere.com", open(home("tests/data/emails/beth-alerts.msg")).read())
    stubs = alerts.get_html_stubs(alertsmsg.body())
    assert len(stubs) == 15


def test_get_raw_alert():
    """
    Given a chunk of html, turn it into
    a python dictionary we can use to 
    populate a database record.
    """
    alertsmsg = MailRequest('fakepeer', sender, "alerts-1@lookoutthere.com", open(home("tests/data/emails/beth-alerts.msg")).read())
    stub = alerts.get_html_stubs(alertsmsg.body())[1]
    alert = alerts.get_raw_alert(stub)
    assert alert.has_key('blurb')
    assert alert['title'].startswith("Q&amp;A with outgoing Irving council member")
    assert alert['source'] == "Dallas Morning News"
    assert alert['byline'] == "BRANDON FORMBY"
    alert['url'] == "http://www.dallasnews.com/sharedcontent/dws/news/city/coppell_vr/stories/DN-vanduyneqa_06met.ART.Central.Edition1.f47fa.html"

    stub = alerts.get_html_stubs(alertsmsg.body())[0]
    alert = alerts.get_raw_alert(stub)
    assert alert['byline'] == ""
    assert alert['url'] == "http://bleacherreport.com/articles/388807-beth-phoenix-is-injured-but-thank-god-its-not-serious"    


def test_create_blurbs():
     alertsmsg = MailRequest('fakepeer', sender, "alerts-1@lookoutthere.com", open(home("tests/data/emails/beth-alerts.msg")).read())
     alert = Alert.objects.all()[0]
     blurbs = alerts.create_blurbs(alertsmsg, alert)
     assert len(blurbs) == 15
     blurb = blurbs[1]
     assert blurb.title.startswith("Q&amp;A with outgoing Irving council member")
     assert blurb.source == "Dallas Morning News"
     assert blurb.byline == "BRANDON FORMBY"
     assert len(Blurb.objects.all()) == 15

    

@with_setup(setup_func, teardown_func)
def test_computer_monitor_blurbs():
    """
    This email was generated by google alerts in production for the alert
    "computer monitors"
    """
    alert = create_alert()
    blurbs = alerts.create_blurbs(compmsg, alert)

@with_setup(setup_func, teardown_func)
def test_computer_monitor_stubs():
    """
    This email was generated by google alerts in production for the alert
    "computer monitors". This tests the stubs function.
    """
    alert = create_alert()
    stubs = alerts.get_html_stubs(compmsg.body())
    assert len(stubs) == 11



@with_setup(setup_func, teardown_func)
def test_computer_monitor_raw():
    """
    This email was generated by google alerts in production for the alert
    "computer monitors". This tests getting the raw alerts.
    """
    alert = create_alert()
    stubs = alerts.get_html_stubs(compmsg.body())
    rawAlerts = [alerts.get_raw_alert(stub) for stub in stubs]
    assert len(rawAlerts) == 11
